<!doctype html>
<html lang="en">
	<head>
		<title>O'Reilly Introduction to WebRTC</title>
		<link rel="stylesheet" type="text/css" href="css/style.css">
		<script src="https://cdn.socket.io/4.8.1/socket.io.min.js" integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+" crossorigin="anonymous"></script>
		<script>
			var socket = io();
		</script>
	</head>
	<body>
		<div>
			Video:<select id="camera"></select>
		</div>
		<div>
			Audo:<select id="audio"></select>
		</div>
		<video id="videoTag"></video>
		<div>
			<label>Your Name</label><input id="myName" type="text" />
			<label>Message</label><input id="myMessage" type="text" />
			<input id="sendMessage" type="submit" />
			<div id="chatArea">Message Output:</br></div>
		</div>
		<p><button id="takeProfilePicture" type="button" autofocus="true">Create Profile Picture</button></p>
		<canvas id="profilePicCanvas" style="display:none"></canvas>
		<div>
			<img id="profilePictureOutput">
		</div>
		<script>
			
			var videoArea=document.querySelector("video");
			var videoSelect=document.querySelector('#camera');
			var audioSelect=document.querySelector('#audio');
			var profilePicCanvas=document.querySelector("#profilePicCanvas");
			var profilePictureOutput=document.querySelector("#profilePictureOutput");
			var takePicButton=document.querySelector("#takeProfilePicture");
			var videoTag=document.querySelector("#videoTag");

			var myName=document.querySelector("#myName");
			var myMessage=document.querySelector("#myMessage");
			var sendMessage=document.querySelector("#sendMessage");
			var chatArea=document.querySelector("#chatArea");
			var ROOM="chat";

			var width=240; //Desired width of the profile picture
			var height=0; //Calulated later base on image ratio
			var streaming=false; //Used to determine when the video has loaded
			var localStream;
			
			//Take Picture Button Handler
			takePicButton.addEventListener('click',function(ev){
				takeProfilePic();
				ev.preventDefault();
			},false);
			//Video Can Play Event Handler
			videoTag.addEventListener('canplay',function(ev){
				console.log('video can play');
				if (!streaming)
				{
					height=videoTag.videoHeight/(videoTag.videoWidth/width);
					//height=videoTag.videoArea.Width/(videoTag.videoArea.Width/Width);
					//firefox currently has a bug where the height can't be read
					//the video , so we will make assumptions if this happens.

					if(isNaN(height))
					{
						height=width/(4/3);
					}

					videoTag.setAttribute('width',width);
					videoTag.setAttribute('height',height);
					profilePicCanvas.setAttribute('width',width);
					profilePicCanvas.setAttribute('height',height);
					streaming=true;
				}
			},false); 

			//Take Picture Function
			function takeProfilePic(){
				var context=profilePicCanvas.getContext('2d');
				if(window && height)
				{
					profilePicCanvas.width=width;
					profilePicCanvas.height=height;
					context.drawImage(videoTag,0,0,width,height);

					var data=profilePicCanvas.toDataURL('image/png');
					profilePictureOutput.setAttribute('src',data);
				}
			}

			//if not any 
			if (typeof MediaStreamTrack=='undefine' || typeof MediaStreamTrack.enumerateDevices=='undefine'){
				document.querySelector('#camera').style.visibility="hidden";
			}
			else
			{
				getCameras();
			}
		
			//Video Device Change Event
			videoSelect.onchange=function(){
				console.log('Vido onchange '+videoSelect.value);
				startStream();
			}

			//Audio Device Select Change Event
			audioSelect.onchange=function(){
				console.log('Audio onchange '+audioSelect.value);
				startStream();
			}

			//Start Stream
			async function startStream()
			{
				
				//navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUseerMedia||navigator.mozGetUserMedia;
				
				let videoSource=videoSelect.value;
				let audioSource=audioSelect.value;
				console.log('videoSelect.value: '+videoSelect.value);
				var constraints={
					audio:{
						deviceId: audioSource ? { exact: audioSource } : undefined
					},
					video:{
						/*mandatory:{
							minWidth:240,
							maxWidth:240,
							minHeight:360,
							maxHeight:480
						},
						option:[{
							souceId:videoSource,
							
						}],*/
						deviceId: videoSource ? { exact: videoSource } : undefined
					}
					
				};	


				await navigator.getUserMedia(constraints,onSuccess,onError);
			}

			function ConnectSocketIO()
			{
				
				socket.emit('ready',ROOM);
				socket.on('announce',function(data){
					displayMessage(data.message);
				});
			}

			function displayMessage(message)
			{
				chatArea.innerHTML=chatArea.innerHTML+"</br>"+message;
			}
		
			//Get Camera and Audio Device List
			function getCameras()
			{
				//var isFirstCamer=false;
				navigator.mediaDevices.enumerateDevices()
				.then(devices => {
					devices.forEach(device => {
					let option = document.createElement('option');
					if (device.kind === 'videoinput') {
						console.log('Video device: ', device);
						option.text=device.label||'camera '+(videoSelect.length);
						option.value=device.deviceId;
						videoSelect.appendChild(option);
					} else if (device.kind === 'audioinput') {
						console.log('Audio device: ', device);
						option.text=device.label||'camera '+(audioSelect.length);
						option.value=device.deviceId;
						audioSelect.appendChild(option);
					}
					});
					console.log("get Camera List Done");
					startStream();
					ConnectSocketIO();
				})
				.catch(err => {
					console.error('Error enumerating devices: ', err);
				});
			}
			//Create Media Stream Success Handler
			function onSuccess(stream){
				
				//stop old stream
				StopVideo();
				//stream.getTracks().forEach(function (track) { track.stop() })
				//start new stream
				localStream=stream;
				console.log("Success! We have a stream");
				//eprecated API
				//videoArea.src=window.URL.createObjectURL(stream);
				videoArea.srcObject=null;
				videoArea.srcObject = stream;
				//videoArea.className="grayscale_filter";	
				videoArea.play();
			}
			//Create Video Stream Error Handler
			function onError(stream){
				constraints.log("Error with getUserMedia: ",error);
			}
			//Stop Video and Audio
			function StopVideo()
			{
				const video = document.querySelector('video');

				// A video's MediaStream object is available through its srcObject attribute
				const mediaStream = video.srcObject;
				if (mediaStream)
				{
					// Through the MediaStream, you can get the MediaStreamTracks with getTracks():
					const tracks = mediaStream.getTracks();
					//stop all like so:
					tracks.forEach(track => track.stop())
				}
			}
		</script>
	</body>
</html>
